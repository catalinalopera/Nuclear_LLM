# -*- coding: utf-8 -*-
"""script_get_wiki_articles_w_key_words_Canada_glossary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iYZDx4Gju0Sb2qIq9tFLIHxhKWadEDLk

## Downloading articles from Wikipedia by nuclear inductry related key words

This script is designed to automate the process of searching, fetching, and saving Wikipedia articles related to nuclear topics that mention Canada using Wiki API.

1. Setup and Imports
The script begins by installing necessary packages (requests, boto3, google-cloud-storage).
It then imports the required modules (requests, time).

2. Defining Functions
##### search_wikipedia(keyword):

This function searches Wikipedia for articles containing a specific keyword along with "Canada" and "nuclear".
- It makes a request to the Wikipedia API with the search parameters.
- It returns a list of article titles that match the search criteria.

##### fetch_wikipedia_article(title):

This function fetches the content of a Wikipedia article given its title.
- It makes a request to the Wikipedia API to get the plain text extract of the article.
- It returns the extracted text of the article.

##### count_words(text):

This function counts the number of words in a given text.
- It splits the text into words and returns the count.

3. Defining Keywords
A comprehensive list of keywords related to nuclear topics is defined. These keywords are used to search for relevant Wikipedia articles. the list was prepared using multiple sources:
- Glossary of CNSC Terminology (REGDOC-3.6): This glossary provided specific terminologies related to nuclear safety and security.
- CNSC Regulatory Documents: Names of the documents were sourced from the CNSC website.
- Common Sense and Google Keywords Search: Additional relevant keywords were identified using common sense and Google searches.

4. Main Execution Block
The script initializes counters for the total number of articles and total word count, and records the start time.

For Each Keyword:

- It searches for Wikipedia articles containing the keyword and "Canada" and "nuclear".
- For each article title found, it fetches the article content.
- If the article content mentions "Canada", it saves the article text to a file named with the keyword and article title.
- It updates the total article count and word count.

The script prints progress messages, including the titles of saved articles and any articles that did not meet the criteria.

After processing all keywords, it prints the total number of articles saved, the total word count, and the total time taken for the execution.

### Key Points
* Search and Fetch: The script searches for Wikipedia articles using a combination of specific keywords and additional terms to ensure relevance. It fetches the article content and checks if it mentions "Canada".
* Save Articles: Articles that meet the criteria are saved locally with filenames incorporating the keyword and article title.
* Progress Reporting: The script provides feedback on progress, including counts of articles saved and word counts.
* Efficiency: The script measures and prints the total time taken for execution, providing insights into its performance.
"""

# #Setting up the environment by installing necessary libraries
# !pip install -q requests boto3 google-cloud-storage

#Importing necessary libraries
import requests
import time
import os
import zipfile
import io
import glob
from io import BytesIO

#Function to search Wikipedia for articles containing a specific keyword along with "Canada" and "nuclear"
def search_wikipedia(keyword):
    """
    Search Wikipedia for articles containing a specific keyword along with "Canada" and "nuclear".

    Args:
        keyword (str): The keyword to search for.

    Returns:
        list: A list of article titles that match the search criteria.
    """
    url = f"https://en.wikipedia.org/w/api.php"
    params = {
        'action': 'query',
        'list': 'search',
        'format': 'json',
        'srsearch': f'"{keyword}" AND "Canada" AND "nuclear"',  # Ensure all terms are included
        'srlimit': 100  # Limit to the top 100 results for each keyword
    }
    response = requests.get(url, params=params)
    data = response.json()
    search_results = data.get('query', {}).get('search', [])
    return [result['title'] for result in search_results]

#Function to fetch the content of a Wikipedia article given its title
def fetch_wikipedia_article(title):
    """
    Fetch the content of a Wikipedia article given its title.

    Args:
        title (str): The title of the Wikipedia article.

    Returns:
        str: The extracted text of the article.
    """
    url = f"https://en.wikipedia.org/w/api.php"
    params = {
        'action': 'query',
        'format': 'json',
        'prop': 'extracts',
        'explaintext': True,
        'titles': title
    }
    response = requests.get(url, params=params)
    data = response.json()
    page = next(iter(data['query']['pages'].values()))
    if 'extract' in page:
        return page['extract']
    return None

#Function counts the number of words in a given text
def count_words(text):
    """
    Count the number of words in a given text.

    Args:
        text (str): The text to count words in.

    Returns:
        int: The number of words in the text.
    """
    words = text.split()
    return len(words)

# List of keywords to search
keywords = [
    "nuclear safety",
    "nuclear security",
    "nuclear regulations",
    "nuclear industry",
    "nuclear act",
    "Canada Energy Regulator",
    "nuclear facility",
    "nuclear facilities",
    "CNSC",
    "Nuclear Safety and Control Act",
    "Canadian Nuclear Safety Commission",
    "CNSC regulatory documents",
    "Nuclear Facilities Regulations",
    "International Atomic Energy Agency",
    "IAEA Regulations",
    "IAEA",
    "IAEA Safety Glossary",
    "certification of prescribed nuclear equipment",
    "REGDOC",
    "RegDoc",
    "nuclear safety standards",
    "nuclear reactor safety",
    "radiation protection",
    "nuclear safety culture",
    "nuclear safety regulations",
    "nuclear plant safety",
    "nuclear safety analysis",
    "emergency preparedness nuclear",
    "nuclear safety protocols",
    "nuclear accident prevention",
    "safety of nuclear facilities",
    "nuclear safety management",
    "nuclear risk assessment",
    "nuclear safety engineering",
    "nuclear safety guidelines",
    "nuclear regulatory framework",
    "nuclear regulations compliance",
    "nuclear safety laws",
    "nuclear regulatory authority",
    "nuclear industry regulations",
    "nuclear regulatory standards",
    "nuclear licensing regulations",
    "nuclear regulatory policies",
    "nuclear security regulations",
    "nuclear regulatory compliance",
    "regulatory oversight nuclear",
    "nuclear energy regulation",
    "nuclear material regulations",
    "nuclear environmental regulations",
    "nuclear waste regulations",
    "nuclear security standards",
    "nuclear facility security",
    "nuclear security measures",
    "nuclear material security",
    "nuclear security regulations",
    "nuclear security protocols",
    "nuclear security threats",
    "nuclear security compliance",
    "nuclear security policies",
    "nuclear security frameworks",
    "nuclear security technology",
    "nuclear security law",
    "nuclear security incidents",
    "nuclear security assessments",
    "nuclear security strategy",
    "security of nuclear substances",
    "nuclear fission",
    "nuclear fusion",
    "radioactive decay",
    "half-life",
    "critical mass",
    "nuclear chain reaction",
    "neutron moderation",
    "nuclear reactor",
    "control rods",
    "nuclear fuel cycle",
    "radioactive waste management",
    "nuclear radiation",
    "alpha particles",
    "beta particles",
    "gamma rays",
    "neutron flux",
    "nuclear isotopes",
    "radioactive contamination",
    "nuclear meltdown",
    "radiation shielding",
    "nuclear power plant",
    "uranium enrichment",
    "plutonium reprocessing",
    "nuclear decommissioning",
    "nuclear proliferation",
    "nuclear safeguards",
    "radiation dosimetry",
    "thermal neutron",
    "fast neutron",
    "breeder reactor",
    "Atomic Energy of Canada",
    "nuclear material",
    "radiation protection",
    "code of practice",
    "REGDOC-3.6",
    "Atomic Energy of Canada Limited",
    "authorized nuclear operator",
    "boiling water reactor",
    "Canada Deuterium Uranium",
    "criticality accident sequence assessment",
    "Canadian Council of Ministers of the Environment",
    "Canadian Environmental Assessment Act",
    "certified exposure device operator",
    "Canadian Environmental Protection Act",
    "counterfeit",
    "curie",
    "Canadian Nuclear Safety Commission",
    "criticality safety control",
    "emergency core cooling system",
    "extended loss of AC power",
    "Federal Nuclear Emergency Plan",
    "fitness for duty",
    "fuel incident notification and analysis system",
    "Federal Nuclear Emergency Plan",
    "gigabecquerel",
    "gray",
    "high-enriched uranium",
    "hydrogenated tritium oxide",
    "International Atomic Energy Agency",
    "irradiated fuel bay",
    "Institute of Nuclear Power Operations",
    "International Physical Protection Advisory Service",
    "International Reporting System for Operating Experience",
    "International Nuclear and Radiological Event Scale",
    "International Commission on Radiological Protection",
    "International Commission on Radiation Units and Measurements",
    "low-enriched uranium",
    "loss-of-coolant accident",
    "megabecquerel",
    "micro modular reactor",
    "nuclear criticality safety",
    "National Non-Destructive Testing Certification Body",
    "nuclear emergency management",
    "Nuclear Emergency Organization",
    "nuclear energy worker",
    "nuclear power plant",
    "Nuclear Safety and Control Act",
    "nuclear security officer",
    "nuclear criticality safety evaluation",
    "National Dose Registry",
    "Nuclear Suppliers Group",
    "spent nuclear fuel",
    "safe operating envelope",
    "sievert",
    "International System of Units",
    "systems important to safety",
    "site selection threat",
    "risk assessment"
]


import os
import time
import zipfile
import sys

# Directory to save the ZIP file
save_directory = '/content/zip_file'

# Create the folder if it does not exist
if not os.path.exists(save_directory):
    os.makedirs(save_directory)

# Create a ZIP file to store all articles
zip_filename = os.path.join(save_directory, 'articles.zip')

# Start time for the process
start_time = time.time()

total_articles = 0
article_limit = 30  # Set the limit for the number of articles

try:
    # Create a ZIP file and add articles to it
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for keyword in keywords:
            titles = search_wikipedia(keyword)
            for title in titles:
                article_text = fetch_wikipedia_article(title)
                if article_text and "Canada" in article_text:
                    safe_title = f"wiki_{keyword}_{title.replace(' ', '_').replace('/', '_')}.txt"
                    if safe_title.startswith("wiki_CNSC"):
                        # Write article content directly to the zip file
                        zipf.writestr(safe_title, article_text)
                        total_articles += 1

                        # Print the current count of articles added
                        sys.stdout.write(f'\rArticles found: {total_articles}')
                        sys.stdout.flush()

                        # Check if the limit is reached
                        if total_articles >= article_limit:
                            raise StopIteration("Article limit reached.")

except StopIteration:
    # Handle the case where the article limit is reached
    print("\nArticle limit reached. Stopping the process.")
except Exception as e:
    # Optionally handle specific exceptions or log them
    print(f"An error occurred: {e}")
finally:
    end_time = time.time()
    # Print final total number of articles found and elapsed time
    print(f"\nTotal articles found and added to ZIP: {total_articles}")
    print(f"Total time taken: {end_time - start_time:.2f} seconds")


# print(f"Zip file created at {zip_filename}")
# print(f"Total articles added: {total_articles}")
# print(f"Total word count: {total_word_count}")
# print(f"Total time taken: {end_time - start_time} seconds")

# # Searching for articles and fetching their content
# total_articles = 0
# total_word_count = 0
# start_time = time.time()

# for keyword in keywords:
#     titles = search_wikipedia(keyword)
#     for title in titles:
#         article_text = fetch_wikipedia_article(title)
#         if article_text and "Canada" in article_text:
#             safe_title = f"wiki_{keyword}_{title.replace(' ', '_').replace('/', '_')}"
#             with open(f"{safe_title}.txt", "w", encoding="utf-8") as file:
#                 file.write(article_text)
#             print(f"Saved article: {title}")
#             total_articles += 1
#             total_word_count += count_words(article_text)
#         else:
#             print(f"Article not found or does not mention Canada: {title}")

# end_time = time.time()
# print(f"Total articles saved: {total_articles}")
# print(f"Total word count: {total_word_count}")
# print(f"Total time taken: {end_time - start_time} seconds")